<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--
        根节点包含的属性

        scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
        debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    -->

    <!--子节点二 <contextName> 设置上下文名称-->
    <contextName>logback-dongxiang-temp</contextName>
    <!--    定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径
        <property name="log.path" value="E:\\log\\logback.log" />
     -->

    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <withJansi>true</withJansi>
        <encoder>
            <!--格式化输出：%d:表示日期 %thread:表示线程名  %-5level:级别从左显示5个字符宽度 %msg:日志消息 %n:是换行符-->
            <pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>
            <pattern>%black(控制台-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) - %cyan(%msg%n)</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!-- info  输出到文件 -->
    <appender name="file-info"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>./logs/%d{yyyy-MM-dd}.info.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{80} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!--debug 输出到文件  -->
    <appender name="file-debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>./logs/%d{yyyy-MM-dd}.debug.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{80} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>


    <!--error 输出到文件  -->
    <appender name="file—error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>./logs/%d{yyyy-MM-dd}.error.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder>
            <!--<pattern>%date [%thread] %-5level %logger{80} - %msg%n</pattern>-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{80} - %msg%n</pattern>
        </encoder>
    </appender>

    <logger name="org.apache.ibatis" level="INFO"/>
    <logger name="java.sql.Connection" level="debug"/>
    <logger name="java.sql.Statement" level="debug"/>
    <logger name="java.sql.PreparedStatement" level="debug"/>

<!--子节点一 <root>  指定最基础的日志输出级别___当大于这个级别 appender—name 的，可以输出到控制台
    root: 是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
          默认是DEBUG。
可以包含零个或多个元素，标识这个appender将会添加到这个loger。
    -->
    <root level="info">
        <appender-ref ref="console"/><!---->
        <appender-ref ref="file-info"/>
    </root>


</configuration>


